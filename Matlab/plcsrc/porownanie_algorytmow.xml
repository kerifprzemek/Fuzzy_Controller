<?xml version="1.0" encoding="UTF-8"?>
<project>
  <!--(*
 *
 * File: porownanie_algorytmow.xml
 *
 * IEC 61131-3 Structured Text (ST) code generated for subsystem "porownanie_algorytmow/ADRC"
 *
 * Model name                      : porownanie_algorytmow
 * Model version                   : 1.23
 * Model creator                   : kerif
 * Model last modified by          : kerif
 * Model last modified on          : Mon Mar 18 20:22:25 2024
 * Model sample time               : 0.02s
 * Subsystem name                  : porownanie_algorytmow/ADRC
 * Subsystem sample time           : 0.02s
 * Simulink PLC Coder version      : 23.2 (R2023b) 01-Aug-2023
 * ST code generated on            : Mon Mar 18 20:50:19 2024
 *
 * Target IDE selection            : 3S CoDeSys 3.5
 * Test Bench included             : No
 *
 *)
-->
  <fileHeader companyName="The Mathworks, Inc." companyURL="www.mathworks.com" contentDescription="" creationDateTime="2024-03-18T20:50:19" productName="Simulink PLC Coder" productRelease="(R2023b)" productVersion="23.2"/>
  <contentHeader name="porownanie_algorytmow">
    <coordinateInfo>
      <fbd>
        <scaling x="0" y="0"/>
      </fbd>
      <ld>
        <scaling x="0" y="0"/>
      </ld>
      <sfc>
        <scaling x="0" y="0"/>
      </sfc>
    </coordinateInfo>
  </contentHeader>
  <types>
    <dataTypes/>
    <pous>
      <pou name="ADRC" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="ssMethodType">
              <type>
                <derived name="SINT"/>
              </type>
            </variable>
            <variable name="Ref">
              <type>
                <derived name="LREAL"/>
              </type>
            </variable>
            <variable name="fdbck">
              <type>
                <derived name="LREAL"/>
              </type>
            </variable>
            <variable name="b">
              <type>
                <derived name="LREAL"/>
              </type>
            </variable>
            <variable name="obs_band">
              <type>
                <derived name="LREAL"/>
              </type>
            </variable>
            <variable name="ctrl_band">
              <type>
                <derived name="LREAL"/>
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="y">
              <type>
                <derived name="LREAL"/>
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="c_DiscreteTimeIntegrator_DS">
              <type>
                <array>
                  <dimension lower="0" upper="1"/>
                  <baseType>
                    <derived name="LREAL"/>
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="usedInputGain">
              <type>
                <derived name="LREAL"/>
              </type>
            </variable>
            <variable name="b_controllerBandwidth">
              <type>
                <derived name="LREAL"/>
              </type>
            </variable>
            <variable name="b_observerBandwidth">
              <type>
                <derived name="LREAL"/>
              </type>
            </variable>
            <variable name="c_idx_2">
              <type>
                <derived name="LREAL"/>
              </type>
            </variable>
            <variable name="c_idx_1">
              <type>
                <derived name="LREAL"/>
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml"><![CDATA[

CASE ssMethodType OF
    SS_INITIALIZE: 
        (* SystemInitialize for Atomic SubSystem: '<Root>/ADRC' *)
        (* InitializeConditions for DiscreteIntegrator: '<S3>/Discrete-Time Integrator' *)
        c_DiscreteTimeIntegrator_DS[0] := 0.0;
        c_DiscreteTimeIntegrator_DS[1] := 0.0;
        (* End of SystemInitialize for SubSystem: '<Root>/ADRC' *)
    SS_STEP: 
        (* Outputs for Atomic SubSystem: '<Root>/ADRC' *)
        (* MATLAB Function: '<S5>/Extended state feedback robust controller' incorporates:
         *  DiscreteIntegrator: '<S3>/Discrete-Time Integrator' *)
        (* MATLAB Function 'ADRC/ADRC controller/State feedback robust controller/Extended state feedback robust controller': '<S10>:1' *)
        (* '<S10>:1:8' usedInputGain = evaluateSource(inputGainParameter, externalInputGainParameter); *)
        (* '<S10>:1:17' if(external == 0) *)

        IF b = 0.0 THEN 
            (* '<S10>:1:18' output = internal; *)
            usedInputGain := 0.005862;
        ELSE 
            (* '<S10>:1:19' else *)
            (* '<S10>:1:20' output = external; *)
            usedInputGain := b;
        END_IF;

        (* '<S10>:1:9' usedControllerBandwidth = evaluateSource(controllerBandwidth, externalControllerBandwidth); *)
        (* '<S10>:1:17' if(external == 0) *)

        IF ctrl_band = 0.0 THEN 
            (* '<S10>:1:18' output = internal; *)
            b_controllerBandwidth := 0.5;
        ELSE 
            (* '<S10>:1:19' else *)
            (* '<S10>:1:20' output = external; *)
            b_controllerBandwidth := ctrl_band;
        END_IF;

        (* '<S10>:1:10' K = calculateControllerGain(usedControllerBandwidth, dynamicsOrder); *)
        (* '<S10>:1:25' extendedControllerGain = poly(-controllerBandwidth * ones(1, dynamicsOrder)); *)
        (* '<S10>:1:26' controllerGain = flip(extendedControllerGain(2:end)); *)
        (* '<S10>:1:12' controlSignal = 1/usedInputGain * (estimatedExtendedState(end) +... *)
        (* '<S10>:1:13'             K * estimatedExtendedState(1:end-1)); *)
        y := ((b_controllerBandwidth * c_DiscreteTimeIntegrator_DS[0]) + c_DiscreteTimeIntegrator_DS[1]) * (1.0 / usedInputGain);
        (* End of MATLAB Function: '<S5>/Extended state feedback robust controller' *)
        

        (* Saturate: '<S13>/Saturation' *)

        IF y > 100.0 THEN 
            y := 100.0;
        ELSIF y < 0.0 THEN 
            y := 0.0;
        END_IF;

        (* End of Saturate: '<S13>/Saturation' *)
        

        (* MATLAB Function: '<S3>/Linear extended state observer' incorporates:
         *  DiscreteIntegrator: '<S3>/Discrete-Time Integrator'
         *  Sum: '<S1>/Sum' *)
        (* MATLAB Function 'ADRC/ADRC controller/Linear extended state observer/Linear extended state observer': '<S6>:1' *)
        (* '<S6>:1:10' usedInputGain = evaluateSource(inputGainParameter, externalInputGainParameter); *)
        (* '<S6>:1:22' if(external == 0) *)

        IF b = 0.0 THEN 
            (* '<S6>:1:23' output = internal; *)
            b_controllerBandwidth := 0.005862;
        ELSE 
            (* '<S6>:1:24' else *)
            (* '<S6>:1:25' output = external; *)
            b_controllerBandwidth := b;
        END_IF;

        (* '<S6>:1:11' usedObserverBandwidth = evaluateSource(observerBandwidth, externalObserverBandwidth); *)
        (* '<S6>:1:22' if(external == 0) *)

        IF obs_band = 0.0 THEN 
            (* '<S6>:1:23' output = internal; *)
            b_observerBandwidth := 3.0;
        ELSE 
            (* '<S6>:1:24' else *)
            (* '<S6>:1:25' output = external; *)
            b_observerBandwidth := obs_band;
        END_IF;

        (* '<S6>:1:12' A = calculateObserverStateMatrix(dynamicsOrder); *)
        (* '<S6>:1:13' B = calculateObserverInputMatrix(usedInputGain, dynamicsOrder); *)
        (* '<S6>:1:35' observerInputMatrix = [zeros(dynamicsOrder-1,1); -inputGainParameter; 0]; *)
        (* '<S6>:1:14' L = calculateObserverGainVector(usedObserverBandwidth, dynamicsOrder); *)
        (* '<S6>:1:39' extendedGainVector = poly(-observerBandwidth * ones(1, dynamicsOrder+1))'; *)
        c_idx_2 := b_observerBandwidth * b_observerBandwidth;
        c_idx_1 := b_observerBandwidth - ( -b_observerBandwidth);
        (* '<S6>:1:40' observerGainVector = extendedGainVector(2:end); *)
        (* '<S6>:1:16' estimatedExtendedStateDerivative = A * previousEstimatedExtendedState +... *)
        (* '<S6>:1:17'         B * controlSignal +... *)
        (* '<S6>:1:18'         L * (controlError - previousEstimatedExtendedState(1)); *)
        b_observerBandwidth := (Ref - fdbck) - c_DiscreteTimeIntegrator_DS[0];
        (* Update for DiscreteIntegrator: '<S3>/Discrete-Time Integrator' incorporates:
         *  MATLAB Function: '<S3>/Linear extended state observer' *)
        (* MATLAB Function 'ADRC/ADRC controller/Observer output/Only estimated total disturbance/Last element of estimated extended state': '<S8>:1' *)
        (* '<S8>:1:2' y = u(end); *)
        c_DiscreteTimeIntegrator_DS[0] := ((((( -b_controllerBandwidth) * y) + c_DiscreteTimeIntegrator_DS[1]) + (c_idx_1 * b_observerBandwidth)) * 0.02) + c_DiscreteTimeIntegrator_DS[0];
        c_DiscreteTimeIntegrator_DS[1] := ((c_idx_2 * b_observerBandwidth) * 0.02) + c_DiscreteTimeIntegrator_DS[1];
        (* End of Outputs for SubSystem: '<Root>/ADRC' *)
END_CASE;


]]></xhtml>
          </ST>
        </body>
      </pou>
    </pous>
  </types>
  <instances>
    <configurations/>
  </instances>
  <addData>
    <data handleUnknown="implementation" name="http://www.3s-software.com/plcopenxml/globalvars">
      <globalVars constant="true" name="GVL_CONSTS">
        <variable name="SS_INITIALIZE">
          <type>
            <derived name="SINT"/>
          </type>
          <initialValue>
            <simpleValue value="0"/>
          </initialValue>
        </variable>
        <variable name="SS_STEP">
          <type>
            <derived name="SINT"/>
          </type>
          <initialValue>
            <simpleValue value="1"/>
          </initialValue>
        </variable>
      </globalVars>
    </data>
    <data handleUnknown="implementation" name="http://www.3s-software.com/plcopenxml/globalvars">
      <globalVars name="GVL_VARS"/>
    </data>
  </addData>
  <addData>
    <data handleUnknown="discard" name="http://www.3s-software.com/plcopenxml/projectstructure">
      <ProjectStructure>
        <Object Name="GVL_CONSTS"/>
        <Object Name="GVL_VARS"/>
        <Object Name="ADRC"/>
      </ProjectStructure>
    </data>
  </addData>
</project>
